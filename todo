#!/usr/local/bin/python3
# Author : Nesoy

import sqlite3 as sqlite
import sys
import datetime

DATABASE_NAME = "todolist.db"
conn = sqlite.connect(DATABASE_NAME)

# Status
TODO = ' todo'
DOING = 'doing'
DONE = ' done'

# Time Format
TIME_FORMAT = '%Y-%m-%d %H:%M:%S'

# SQL
SQL_GET_LIST = "SELECT * FROM task WHERE status = (?)"
SQL_DELETE_TODO = "DELETE FROM task WHERE id=(?)"

SQL_UPDATE_TODO = "UPDATE task SET status = (?) WHERE id=(?)"
SQL_UPDATE_START_TIME = "UPDATE task SET startTime = (?) WHERE id=(?)"
SQL_UPDATE_END_TIME = "UPDATE task SET endTime = (?) WHERE id=(?)"

SQL_INSERT_TODO = "INSERT INTO task(status, description) values (?,?)"
SQL_CREATE_TABLE = "CREATE TABLE IF NOT EXISTS task(id INTEGER PRIMARY KEY, status TEXT, description TEXT, startTime TEXT, endTime TEXT)"
SQL_USED_TIME = "SELECT strftime('%s','now', 'localtime') - strftime('%s',(?));"

# Time
def getUsingTime(startTime):
    global conn
    with conn:
        cur = conn.cursor()
        cur.execute(SQL_USED_TIME, [startTime])
        for time in cur.fetchall(): # Refactoring call once
            usedTime = time[0]
        return usedTime
# Color
class color:
    WHITE = '\033[37m'
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def init():
    global conn
    with conn:
        cur = conn.cursor()
        cur.execute(SQL_CREATE_TABLE)

# CREATE
def addTodo(param):
    global conn
    with conn:
        cur = conn.cursor()
        sql = SQL_INSERT_TODO
        desc = " ".join(param[2:])
        cur.execute(sql, [TODO, desc])
        conn.commit()

# READ
def getTodoList():
    return getList(TODO)

def getDoingList():
    return getList(DOING)

def getDoneList():
    return getList(DONE)

def getList(param):
    global conn
    todoList = [] # empty todolist
    with conn:
        cur = conn.cursor()
        cur.execute(SQL_GET_LIST, [param])
        for task in cur.fetchall():
            todoList.append(task)
        return todoList

# REMOVE
def removeTodo(todoList, index):
    global conn
    id = todoList[int(index)-1][0]
    with conn:
        cur = conn.cursor()
        sql = SQL_DELETE_TODO
        cur.execute(sql, [id])
        conn.commit()

# UPDATE        
def startTodo(todoList, index):
    time = datetime.datetime.now().strftime(TIME_FORMAT)
    updateTodo(todoList, index, DOING)
    updateStartTime(todoList, index, time)

def endTodo(todoList, index):
    time = datetime.datetime.now()
    updateTodo(todoList, index, DONE)
    updateEndTime(todoList, index, time)

def updateTodo(todoList, index, status):
    global conn
    id = todoList[int(index)-1][0]
    with conn:
        cur = conn.cursor()
        sql = SQL_UPDATE_TODO
        cur.execute(sql, [status, id])
        conn.commit()
        
def updateStartTime(todoList, index, time):
    global conn
    id = todoList[int(index)-1][0]
    with conn:
        cur = conn.cursor()
        sql = SQL_UPDATE_START_TIME
        cur.execute(sql, [time, id])
        conn.commit()

def updateEndTime(todoList, index, time):
    global conn
    id = todoList[int(index)-1][0]
    with conn:
        cur = conn.cursor()
        sql = SQL_UPDATE_END_TIME
        cur.execute(sql, [time, id])
        conn.commit()
        
# PRINT
def printAllList():
    printTodoList()
    printDoingList()
    printDoneList()

def printTodoList():
    todoList = getTodoList()
    printYelloHeader("➤ Todo List")
    printList(todoList, color.WARNING)

def printDoingList():
    todoList = getDoingList()
    printBlueHeader("➤ Doing List")
    printDoingList2(todoList, color.OKBLUE)

def printDoneList():
    todoList = getDoneList()
    printGreenHeader("➤ Done List")
    printList(todoList, color.OKGREEN)

def printDoingList2(todoList, stringColor):
    if(len(todoList) > 0):
        index = 1
        for todo in todoList:
            status = todo[1]
            desc = todo[2]
            startTime = todo[3]
            usedTime = getUsingTime(startTime)
            hours, remainder = divmod(int(usedTime),60*60)
            minutes, seconds = divmod(remainder,60)
            print(stringColor + "#          " + color.ENDC + color.OKGREEN + status + ": " + color.ENDC + "[" + str(index) + "] " + stringColor + desc + color.ENDC + " " + color.BOLD + str(hours) + ":" + str(minutes) + ":" + str(seconds) + color.ENDC)
            index += 1

def printList(todoList, stringColor):
    if(len(todoList) > 0):
        index = 1
        for todo in todoList:
            status = todo[1]
            desc = todo[2]
            print(stringColor + "#          " + color.ENDC + color.OKGREEN + status + ": " + color.ENDC + "[" + str(index) + "] " + stringColor + desc + color.ENDC)
            index += 1

def printYelloHeader(string):
    print(color.BOLD + color.WARNING + string + color.ENDC)
def printGreenHeader(string):
    print(color.BOLD + color.OKGREEN + string + color.ENDC)
def printBlueHeader(string):
    print(color.BOLD + color.OKBLUE + string + color.ENDC)

def main(argv):
    init()
    if(argv[1] == "add"):
        addTodo(argv)

    if(argv[1] == "list"):
        if(len(argv) > 2):
            if(argv[2] == "all"):
                printAllList()
            if(argv[2] == "doing"):
                printDoingList()
            if(argv[2] == "done"):
                printDoneList()
        else:
           printTodoList()
    
    if(argv[1] == "remove"):
        # Todo : Check argv Size
        # remove only todo list -> update doing, done 
        todoList = getTodoList()
        removeTodo(todoList, argv[2])

    if(argv[1] == "start"):
        todoList = getTodoList()
        startTodo(todoList, argv[2])

    if(argv[1] == "end"):
        todoList = getDoingList()
        endTodo(todoList, argv[2])
    
    # Todo : Search

if __name__ == "__main__":
        main(sys.argv)


